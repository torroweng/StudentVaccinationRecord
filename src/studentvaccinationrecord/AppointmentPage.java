/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package studentvaccinationrecord;

import Class.AppointmentClass;
import Signature.BasicDS;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author cweng
 */
public class AppointmentPage extends javax.swing.JFrame {

    boolean isFound = false;
    public static ArrayList<AppointmentClass> AppointmentId = new ArrayList<AppointmentClass>();
    /**
     * Creates new form AppointmentPage
     */
    public AppointmentPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtApId = new javax.swing.JTextField();
        txtApDate = new javax.swing.JTextField();
        txtApTime = new javax.swing.JTextField();
        txtApStuName = new javax.swing.JTextField();
        txtApLocation = new javax.swing.JTextField();
        txtApStatus = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaSignature = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtVerSign = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtApStuName1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Appointment");

        txtApId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApIdActionPerformed(evt);
            }
        });

        txtApTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApTimeActionPerformed(evt);
            }
        });

        txtaSignature.setEditable(false);
        txtaSignature.setColumns(20);
        txtaSignature.setLineWrap(true);
        txtaSignature.setRows(5);
        jScrollPane1.setViewportView(txtaSignature);

        jLabel1.setText("Appointment Id");

        jLabel2.setText("Appointment Date");

        jLabel3.setText("Appointment Time");

        jLabel4.setText("Appointment Student Name");

        jLabel5.setText("Appointment Location");

        jLabel6.setText("Digital Signature for Student Name");

        jLabel7.setText("Appointment Status");

        btnAdd.setText("Add");
        btnAdd.setEnabled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel8.setText("Verification Signature");

        txtVerSign.setEditable(false);

        jLabel9.setText("Appointment Student Name");

        txtApStuName1.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtApId, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApTime, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApStuName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBack))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtApStuName1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtVerSign, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApStuName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnSearch)
                    .addComponent(btnClear)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtVerSign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApStuName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtApIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApIdActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        MainMenu mainmenupage = new MainMenu();
        mainmenupage.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String search_id = txtApId.getText();
        //search_name is empty, show alert
        if (search_id.isEmpty()) {
            JOptionPane.showMessageDialog(this,"Please insert Appointment Id to search.");

        } else {
            //if not found the txtfile, create new
            //if got read from the txtfile
            File file = new File("AppointmentLedger.txt");
            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);
                String data;
                AppointmentClass appointmentclass;
                while ((data = br.readLine()) != null) {
                    appointmentclass = new AppointmentClass(data);
                    //if student id found, get other data
                    if (appointmentclass.getApId().equals(search_id)) {
                        isFound = true;
                        //Show message
                        JOptionPane.showMessageDialog(this,"Appointment "+search_id+" was already book. ");
                        //label,textbox and button to enable or disable

                        
                        txtApDate.setText(appointmentclass.getApDate());
                        txtApTime.setText(appointmentclass.getApTime());
                        txtApStuName.setText(appointmentclass.getApStuName());
                        txtApLocation.setText(appointmentclass.getApLocation());
                        txtApStatus.setText(appointmentclass.getApStatus()); 
                        txtaSignature.setText(appointmentclass.getApDSign()); 
                        txtApId.setEditable(false);
                        txtApDate.setEditable(false);
                        txtApTime.setEditable(false);
                        txtApStuName.setEditable(false);
                        txtApLocation.setEditable(false);
                        txtApStatus.setEditable(false);
                        btnSearch.setEnabled(false);
                        BasicDS sig = new BasicDS();
                        String ApDetail =txtApStuName.getText();
                        String signature = txtaSignature.getText();
                        
                        boolean isValid = sig.verify(ApDetail,signature);
                        if(!isValid){
                            txtVerSign.setText("Correct");
                            String dtApStuName1 = txtApStuName.getText();
                            txtApStuName1.setText(dtApStuName1);
                        }
                        else{
                            txtVerSign.setText("Wrong");
                        }
                        System.out.println(
				(!isValid)
				?">>Corect!!"
				:">>Incorrect!!"		
				);
                        return;
                    }
                }
                //If data not exist in system
                JOptionPane.showMessageDialog(this, "Appointment "+search_id+" WAS NOT book. ");
                
                //label,textbox and button to enable or disable
                txtApId.setEditable(false);
                btnSearch.setEnabled(false);
                btnAdd.setEnabled(true);
            } catch (FileNotFoundException ex) {
            } catch (IOException | HeadlessException ex) {
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
         txtApId.setEditable(true);
        txtApDate.setEditable(true);
        txtApTime.setEditable(true);
        txtApStuName.setEditable(true);
        txtApLocation.setEditable(true);
        txtApStatus.setEditable(true);
        txtApId.setText("");
        txtApDate.setText("");
        txtApTime.setText("");
        txtApStuName.setText("");
        txtApLocation.setText("");
        txtApStatus.setText("");
        txtaSignature.setText("");
        txtVerSign.setText("");
        txtApStuName1.setText("");
//        txtaVacInfo.setText("");
        btnSearch.setEnabled(true);
        btnAdd.setEnabled(false);
//        btnDecrypt.setEnabled(false);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        
            try {
                //show
                

BasicDS sig = new BasicDS();
String dtApId= txtApId.getText();
String dtApDate = txtApDate.getText();
String dtApTime = txtApTime.getText();
String dtApStuName = txtApStuName.getText();
String dtApLocation = txtApLocation.getText();
String dtApStatus = txtApStatus.getText();

String ApDetail =dtApStuName;
String signature = sig.encrypt(sig.hash(ApDetail));

txtaSignature.setText( signature );
String dtApDSign = txtaSignature.getText();


 if (dtApId.isEmpty() || dtApDate.isEmpty() || dtApTime.isEmpty()|| dtApStuName.isEmpty()|| dtApLocation.isEmpty() || dtApStatus.isEmpty() || dtApDSign.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields.");
           
        } 
      //if no found the txtfile, create new txtfile
      //if got, read from the txtfile based on the data seperate by ","
        else {
            File file = new File("AppointmentLedger.txt");
            AppointmentClass appointment = new AppointmentClass(dtApId, dtApDate, dtApTime,dtApStuName,dtApLocation,dtApStatus,signature);
      //add new Appointment data
            try (PrintWriter pw = new PrintWriter(new FileWriter(file, true))) {
                pw.println(appointment.toString());
                //alert
                JOptionPane.showMessageDialog(this, "New appointment "+dtApId+" had been booked. ");
                   
                //button and textbox enable or disable
                btnAdd.setEnabled(false);
//                btnDecrypt.setEnabled(true);
               txtApId.setEditable(false);
               txtApDate.setEditable(false);
               txtApTime.setEditable(false);
               txtApStuName.setEditable(false);
               txtApLocation.setEditable(false);
               txtApStatus.setEditable(false);
               boolean isValid = sig.verify(ApDetail,signature);
               
                        if(isValid){
                            txtVerSign.setText("Correct");
                            String dtApStuName1 = txtApStuName.getText();
                            txtApStuName1.setText(dtApStuName1);
                        }
                        else{
                            txtVerSign.setText("Wrong");
                        }
		System.out.println(
				(isValid)
				?">>Corect!!"
				:">>Incorrect!!"		
				);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }          
        }     

            } catch (HeadlessException ex) {
               
            }
			
		
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtApTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApTimeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentPage().setVisible(true);
            }
        });
        try{
         
            Scanner s = new Scanner(new File("AppointmentLedger.txt"));
            s.useDelimiter(",");
            while(s.hasNext()){        
                ArrayList<AppointmentClass> appointmentlist = new ArrayList<>();
                String line1 = s.next();    
                String line2 = s.next();     
                String line3 = s.next();        
                String line4 = s.next(); 
                String line5 = s.next(); 
                String line6 = s.next();
                String line7 = s.next();
                AppointmentClass appointment = new AppointmentClass(line1,line2,line3,line4,line5,line6,line7);
                appointmentlist.add(appointment);
            }} catch(FileNotFoundException ex){
            System.out.println("File not found when you first time run this!");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtApDate;
    private javax.swing.JTextField txtApId;
    private javax.swing.JTextField txtApLocation;
    private javax.swing.JTextField txtApStatus;
    private javax.swing.JTextField txtApStuName;
    private javax.swing.JTextField txtApStuName1;
    private javax.swing.JTextField txtApTime;
    private javax.swing.JTextField txtVerSign;
    private javax.swing.JTextArea txtaSignature;
    // End of variables declaration//GEN-END:variables
}
